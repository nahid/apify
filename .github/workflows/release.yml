name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Set version
        id: set_version
        shell: bash
        run: |
          # Strip "v" prefix from the tag for use in asset names and .NET versioning
          echo "VERSION=${{ github.ref_name#v }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      # Build binaries for all platforms
      - name: Build for Linux
        run: dotnet publish Apify.csproj -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -p:Version=${{ steps.set_version.outputs.VERSION }}
      
      - name: Build for Windows
        run: dotnet publish Apify.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:Version=${{ steps.set_version.outputs.VERSION }}

      - name: Build for macOS (x64)
        run: dotnet publish Apify.csproj -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -p:Version=${{ steps.set_version.outputs.VERSION }}

      - name: Build for macOS (ARM64)
        run: dotnet publish Apify.csproj -c Release -r osx-arm64 --self-contained true -p:PublishSingleFile=true -p:Version=${{ steps.set_version.outputs.VERSION }}

      # Prepare release assets
      - name: Install zip
        if: runner.os == 'Linux'
        run: sudo apt-get install -y zip

      - name: Package Linux Asset
        run: |
          ASSET_NAME="apify-${{ steps.set_version.outputs.VERSION }}-Linux"
          mkdir -p release-assets/apify
          mv ./bin/Release/net8.0/linux-x64/publish/apify ./release-assets/apify/
          cd release-assets
          zip -r "../${ASSET_NAME}.zip" apify
          cd .. && rm -rf release-assets/apify

      - name: Package Windows Asset
        run: |
          ASSET_NAME="apify-${{ steps.set_version.outputs.VERSION }}-Windows"
          mkdir -p release-assets/apify
          mv ./bin/Release/net8.0/win-x64/publish/apify.exe ./release-assets/apify/
          cd release-assets
          zip -r "../${ASSET_NAME}.zip" apify
          cd .. && rm -rf release-assets/apify

      - name: Package macOS (x64) Asset
        run: |
          ASSET_NAME="apify-${{ steps.set_version.outputs.VERSION }}-macOS"
          mkdir -p release-assets/apify
          mv ./bin/Release/net8.0/osx-x64/publish/apify ./release-assets/apify/
          cd release-assets
          zip -r "../${ASSET_NAME}.zip" apify
          cd .. && rm -rf release-assets/apify

      - name: Package macOS (ARM64) Asset
        run: |
          ASSET_NAME="apify-${{ steps.set_version.outputs.VERSION }}-macOS-arm64"
          mkdir -p release-assets/apify
          mv ./bin/Release/net8.0/osx-arm64/publish/apify ./release-assets/apify/
          cd release-assets
          zip -r "../${ASSET_NAME}.zip" apify
          cd .. && rm -rf release-assets/apify

      - name: List prepared artifacts
        run: ls -la .

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          artifacts: "*.zip"
          token: ${{ github.token }}